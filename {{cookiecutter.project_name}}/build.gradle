import java.time.Instant

apply plugin: 'java'

// external properties
ext {
  gradleVersion=3.5
  javaVersion=1.8
}

group = '{{cookiecutter.package_name}}'
version = '0.0.1'

description = """{{cookiecutter.project_short_description}}"""

sourceCompatibility = "$javaVersion"
targetCompatibility = "$javaVersion"

defaultTasks 'clean', 'build'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

repositories {
  mavenCentral()
  mavenLocal()
}

buildscript {
  repositories {
    mavenCentral()
  }
}

dependencies {
  compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  compile group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.25'
  compile group: 'org.slf4j', name: 'jul-to-slf4j', version:'1.7.25'
  compile group: 'org.slf4j', name: 'log4j-over-slf4j', version:'1.7.25'
  compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.25'
  testCompile group: 'org.testng', name:'testng', version:'6.14.3'
}

task version {
  // any code that goes here is part of configuring the task
  // this code will always get run, even if the task is not executed
  doLast { // add a task action
    // any code that goes here is part of executing the task
    // this code will only get run if and when the task gets executed
    println project.version
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "$gradleVersion"
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

//packaging tests
task testJar(type: Jar) {
  from sourceSets.test.output
  classifier = 'tests'
}

//packaging source
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

//packaging javadoc
task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives testJar
}

jar {
  manifest {
    attributes 'Implementation-Title': description,
      'Implementation-Version': version,
      'Git-Commit-Id': 'git rev-parse HEAD'.execute().text.trim(),
      'Git-Branch': 'git rev-parse --abbrev-ref HEAD'.execute().text.trim(),
      'Created-By': System.properties['user.name'],
      'Created-At': Instant.now().toString(),
      'Class-Path': configurations.runtime.files.collect {"lib/$it.name" }.join(' ')
  }
}

task copyOthers(type: Copy) {
  from 'src/main/resources/*'
  into "$buildDir/libs"
}

task copyDependencies(type: Copy, dependsOn: ['clean', 'jar']) {
  from copyOthers
  from configurations.runtime
  into "$buildDir/libs/lib"
}

task dist(dependsOn: ['distZip','distTar']) {
  // do nothing
}

task distZip(type: Zip) {
  dependsOn copyDependencies
  from "$buildDir/libs"
}

task distTar(type: Tar) {
  dependsOn copyDependencies
  from "$buildDir/libs"
}

apply from: 'gradle/ide.gradle'
apply from: 'gradle/maven.gradle'
apply from: 'gradle/quality.gradle'
apply from: 'gradle/license.gradle'
apply from: 'gradle/spotless.gradle'
apply from: 'gradle/doc.gradle'
apply from: 'gradle/git.gradle'
